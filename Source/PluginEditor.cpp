/*
  ==============================================================================

  This file was auto-generated by the Introjucer!

  It contains the basic framework code for a JUCE plugin editor.

  ==============================================================================
*/

#include "PluginProcessor.h"
#include "PluginEditor.h"


//==============================================================================
Grnlr_kleinAudioProcessorEditor::Grnlr_kleinAudioProcessorEditor (Grnlr_kleinAudioProcessor& p)
  : AudioProcessorEditor (&p), processor (p), Thread("loading Thread")
{
  addAndMakeVisible(openButton);
  openButton.setButtonText("Open...");
  openButton.addListener(this);
  
  addAndMakeVisible(lengthSlider);
  lengthSlider.setRange(0.01, 16.0);
  lengthSlider.addListener(this);
  
  addAndMakeVisible(positionSlider);
  positionSlider.setRange(0.0, 1.0);
  positionSlider.addListener(this);

  addAndMakeVisible(durationSlider);
  durationSlider.setRange(0.01, 1.0);
  durationSlider.addListener(this);
  
  formatManager.registerBasicFormats();
  startThread();
  
  // Make sure that before the constructor has finished, you've set the
  // editor's size to whatever you need it to be.
  setSize (400, 300);
}

Grnlr_kleinAudioProcessorEditor::~Grnlr_kleinAudioProcessorEditor()
{
  stopThread(4000);
}

//==============================================================================
void Grnlr_kleinAudioProcessorEditor::paint (Graphics& g)
{
  g.fillAll (Colours::white);
}

void Grnlr_kleinAudioProcessorEditor::resized()
{
  int width = getWidth() - 20;
  openButton.setBounds(10, 10, width, 20);

  positionSlider.setBounds(10, 90, width, 40);
  lengthSlider.setBounds(10, 150, width, 40);
  durationSlider.setBounds(10, 210, width, 40);
}

void Grnlr_kleinAudioProcessorEditor::buttonClicked (Button* button)
{
  if(button == &openButton) openButtonClicked();
}

void Grnlr_kleinAudioProcessorEditor::sliderValueChanged(Slider* slider)
{
  if(slider == &lengthSlider)
    processor.lengthRatio = (float) lengthSlider.getValue();
  if(slider == &positionSlider)
    processor.positionOffset = (float) positionSlider.getValue();
  if(slider == &durationSlider)
    processor.durationSeconds = (float) durationSlider.getValue();
}

void Grnlr_kleinAudioProcessorEditor::run()
{
  while (! threadShouldExit())
    {
      checkForPathToOpen();
      checkForBuffersToFree();
      wait (500);
    }
}

void Grnlr_kleinAudioProcessorEditor::checkForBuffersToFree()
{
  for (int i = buffers.size(); --i >= 0;)
    {
      ReferenceCountedBuffer::Ptr buffer (buffers.getUnchecked (i));

      if (buffer->getReferenceCount() == 2)
	buffers.remove (i);
    }
}

void Grnlr_kleinAudioProcessorEditor::checkForPathToOpen()
{
  String pathToOpen;
  swapVariables (pathToOpen, chosenPath);

  if (pathToOpen.isNotEmpty())
    {
      std::cout << "path is not empty!" << std::endl;
      const File file (pathToOpen);
      ScopedPointer<AudioFormatReader> reader (formatManager.createReaderFor (file));

      if (reader != nullptr)
	{
	  const double duration = reader->lengthInSamples / reader->sampleRate;

	  if (duration < 15)
	    {
	      ReferenceCountedBuffer::Ptr newBuffer = new ReferenceCountedBuffer (file.getFileName(),
										  reader->numChannels,
										  reader->lengthInSamples);

	      reader->read (newBuffer->getAudioSampleBuffer(), 0, reader->lengthInSamples, 0, true, true);
	      processor.currentBuffer = newBuffer;
	      buffers.add (newBuffer);
	      processor.sampleIsLoaded  = true;
	      processor.lengthInSamples = reader->lengthInSamples;
	    }
	  else
	    {
	      // handle the error that the file is 15 seconds or longer..
	    }
	}
    }
}

void Grnlr_kleinAudioProcessorEditor::openButtonClicked()
{
  FileChooser chooser ("Select a Wave file shorter than 15 seconds to play...",
		       File::nonexistent,
		       "*.wav");

  if (chooser.browseForFileToOpen())
    {
      const File file (chooser.getResult());
      String path (file.getFullPathName());
      std::cout << path << std::endl;
      swapVariables (chosenPath, path);
      notify();
    }
}

