/*
 ==============================================================================

 This file was auto-generated by the Introjucer!

 It contains the basic framework code for a JUCE plugin editor.

 ==============================================================================
 */

#include "PluginProcessor.h"
#include "PluginEditor.h"

//==============================================================================
class Grnlr_kleinAudioProcessorEditor::ParameterSlider   : public Slider,
private Timer
{
public:
    ParameterSlider (AudioProcessorParameter& p)
    : Slider (p.getName (256)), param (p)
    {
        setRange (0.0, 1.0, 0.0);
        startTimerHz (60);
        updateSliderPos();
    }

    void valueChanged() override
    {
        if(isDragging){
            param.setValueNotifyingHost((float) Slider::getValue());
        } else {
            param.setValue((float) Slider::getValue());
        }

    }

    bool isDragging = false;

    void timerCallback() override       { updateSliderPos(); }

    void startedDragging() override     { param.beginChangeGesture(); isDragging = true; }
    void stoppedDragging() override     { param.endChangeGesture(); isDragging = false; }

    double getValueFromText (const String& text) override   { return param.getValueForText (text); }
    String getTextFromValue (double value) override         { return param.getText ((float) value, 1024); }

    void updateSliderPos()
    {
        const float newValue = param.getValue();

        if (newValue != (float) Slider::getValue())
            Slider::setValue (newValue);
    }

    AudioProcessorParameter& param;

    JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (ParameterSlider)
};

//==============================================================================
Grnlr_kleinAudioProcessorEditor::Grnlr_kleinAudioProcessorEditor (Grnlr_kleinAudioProcessor& p) : AudioProcessorEditor (&p),
                                                                                                  Thread("loading Thread"),
                                                                                                  processor (p)
{
    addAndMakeVisible(openButton);
    openButton.setButtonText("Open...");
    openButton.addListener(this);

    // Position
    addAndMakeVisible(positionSlider = new ParameterSlider (*p.positionParam));
    positionSlider->setSliderStyle(Slider::LinearBar);
    positionSlider->setTextBoxStyle(Slider::NoTextBox, false, 0, 0);

    addAndMakeVisible(randPositionSlider = new ParameterSlider (*p.randPosParam));
    randPositionSlider->setSliderStyle(Slider::LinearBar);
    randPositionSlider->setSliderStyle(Slider::RotaryHorizontalVerticalDrag);


    // Fill Factor
    addAndMakeVisible(fillLabel);
    fillLabel.setText("Fill Factor", dontSendNotification);

    addAndMakeVisible(fillSlider = new ParameterSlider (*p.fillFactorParam));
    fillSlider->setSliderStyle(Slider::RotaryHorizontalVerticalDrag);
    fillSlider->setTextBoxStyle(Slider::TextBoxBelow, false, 80, 20);
    //fillSlider->setSkewFactorFromMidPoint(3);

    // Duration
    addAndMakeVisible(durationLabel);
    durationLabel.setText("Duration", dontSendNotification);

    addAndMakeVisible(durationSlider = new ParameterSlider (*p.durationParam));
    durationSlider->setSliderStyle(Slider::RotaryHorizontalVerticalDrag);
    durationSlider->setTextBoxStyle(Slider::TextBoxBelow, false, 80, 20);
    //durationSlider->setSkewFactorFromMidPoint(1.5);

    // Envelope
    addAndMakeVisible(envCenterLabel);
    envCenterLabel.setText("Env Center", dontSendNotification);

    addAndMakeVisible(envCenterSlider = new ParameterSlider(*p.envCenterParam));
    envCenterSlider->setSliderStyle(Slider::RotaryHorizontalVerticalDrag);
    envCenterSlider->setTextBoxStyle(Slider::TextBoxBelow, false, 80, 20);

    addAndMakeVisible(envSustainLabel);
    envSustainLabel.setText("Env Sustain", dontSendNotification);

    addAndMakeVisible(envSustainSlider = new ParameterSlider(*p.envSustainParam));
    envSustainSlider->setSliderStyle(Slider::RotaryHorizontalVerticalDrag);
    envSustainSlider->setTextBoxStyle(Slider::TextBoxBelow, false, 80, 20);

    // Waveform
    addAndMakeVisible(waveform = new WaveformView (formatManager, p));
    waveform->addChangeListener (this);


    // Sample handling
    formatManager.registerBasicFormats();
    startThread();

    // Make sure that before the constructor has finished, you've set the
    // editor's size to whatever you need it to be.
    setSize (880, 440);

    if( ! processor.loadedPath.isEmpty())
        swapVariables(chosenPath, processor.loadedPath);
}

Grnlr_kleinAudioProcessorEditor::~Grnlr_kleinAudioProcessorEditor()
{
    stopThread(4000);
}

//==============================================================================
void Grnlr_kleinAudioProcessorEditor::paint (Graphics& g)
{
    g.fillAll (Colours::white);
}

void Grnlr_kleinAudioProcessorEditor::resized()
{
    int width = getWidth();
    Rectangle<int> r (getLocalBounds().reduced(4));

    // Waveform
    waveform->setBounds(r.removeFromTop (140));
    openButton.setBounds(10, 170, 120, 20);

    // Position
    positionSlider->setBounds(4, 150, width - 8, 15);

    // Fill Factor
    fillLabel.setBounds(10, 200, 60, 20);
    fillSlider->setBounds(10, 220, 50, 65);

    // Duration
    durationLabel.setBounds(70, 200, 50, 20);
    durationSlider->setBounds(70, 220, 50, 65);

    // Envelope
    envCenterLabel.setBounds(740, 200, 70, 20);
    envCenterSlider->setBounds(740, 220, 50, 65);
    envSustainLabel.setBounds(810, 200, 70, 20);
    envSustainSlider->setBounds(810, 220, 50, 65);


    // Waveform
    std::cout << processor.filePath << std::endl;
    if(processor.sampleIsLoaded){
        const File file (processor.filePath);
        waveform->setFile(file);
    }

}

void Grnlr_kleinAudioProcessorEditor::buttonClicked (Button* button)
{
    if(button == &openButton) openButtonClicked();
}

void Grnlr_kleinAudioProcessorEditor::sliderValueChanged(Slider* slider)
{

}

void Grnlr_kleinAudioProcessorEditor::run()
{
    while (! threadShouldExit())
    {
        checkForPathToOpen();
        checkForBuffersToFree();
        wait (500);
    }
}

void Grnlr_kleinAudioProcessorEditor::checkForBuffersToFree()
{
    for (int i = buffers.size(); --i >= 0;)
    {
        ReferenceCountedBuffer::Ptr buffer (buffers.getUnchecked (i));

        if (buffer->getReferenceCount() == 2)
            buffers.remove (i);
    }
}

void Grnlr_kleinAudioProcessorEditor::checkForPathToOpen()
{
    String pathToOpen;
    swapVariables (pathToOpen, chosenPath);

    if (pathToOpen.isNotEmpty())
    {
        std::cout << "We have a file!" << std::endl;
        const File file (pathToOpen);
        processor.filePath = pathToOpen;
        ScopedPointer<AudioFormatReader> reader (formatManager.createReaderFor (file));

        if (reader != nullptr)
        {
            const double duration = reader->lengthInSamples / reader->sampleRate;

            if (duration < 120)
            {
                ReferenceCountedBuffer::Ptr newBuffer = new ReferenceCountedBuffer (file.getFileName(),
                                                                                    reader->numChannels,
                                                                                    reader->lengthInSamples);

                reader->read (newBuffer->getAudioSampleBuffer(), 0, reader->lengthInSamples, 0, true, true);
                processor.currentBuffer = newBuffer;
                buffers.add (newBuffer);
                processor.sampleIsLoaded  = true;
                processor.lengthInSamples = reader->lengthInSamples;


            }
            else
            {
                // handle the error that the file is 120 seconds or longer..
            }
        }
    }
}


void Grnlr_kleinAudioProcessorEditor::openButtonClicked()
{
    FileChooser chooser ( "Select a Wave file shorter than 60 seconds to play...",
                         File::nonexistent,
                         "*.wav" );

    if (chooser.browseForFileToOpen())
    {
        const File file (chooser.getResult());
        String path (file.getFullPathName());
        swapVariables (chosenPath, path);
        waveform->setFile(file);
        notify();
    }
}

void Grnlr_kleinAudioProcessorEditor::changeListenerCallback (ChangeBroadcaster* source)
{
    if (source == waveform)
        waveform->setFile (waveform->getLastDroppedFile());
}
