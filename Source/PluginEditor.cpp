/*
 ==============================================================================
 
 This file was auto-generated by the Introjucer!
 
 It contains the basic framework code for a JUCE plugin editor.
 
 ==============================================================================
 */

#include "PluginProcessor.h"
#include "PluginEditor.h"


//==============================================================================
Grnlr_kleinAudioProcessorEditor::Grnlr_kleinAudioProcessorEditor (Grnlr_kleinAudioProcessor& p) : AudioProcessorEditor (&p),
                                                                                                  Thread("loading Thread"),
                                                                                                  processor (p)
{
    addAndMakeVisible(openButton);
    openButton.setButtonText("Open...");
    openButton.addListener(this);

    addAndMakeVisible(positionSlider);
    positionSlider.setRange(0.0, 1.0);
    positionSlider.addListener(this);
    positionSlider.setValue(0.2);
    processor.positionOffset = (float) positionSlider.getValue();  
    
    // Fill Factor
    addAndMakeVisible(fillLabel);
    fillLabel.setText("Fill Factor", dontSendNotification);
    
    addAndMakeVisible(fillSlider);
    fillSlider.setRange(0.001, 16.0);
    fillSlider.setSkewFactorFromMidPoint(3);
    fillSlider.addListener(this);
    fillSlider.setValue(1);
    processor.lengthRatio = (float) fillSlider.getValue();
    
    // Duration
    addAndMakeVisible(durationLabel);
    durationLabel.setText("Duration", dontSendNotification);
    
    addAndMakeVisible(durationSlider);
    durationSlider.setRange(0.01, 8.0);
    durationSlider.setSkewFactorFromMidPoint(1.5);
    durationSlider.addListener(this);
    durationSlider.setValue(0.01);
    processor.durationSeconds = (float) durationSlider.getValue();
    
    // Waveform
    addAndMakeVisible(waveform = new WaveformView (formatManager, p));
    waveform->addChangeListener (this);
    
    
    // Sample handling
    formatManager.registerBasicFormats();
    startThread();
    
    // Make sure that before the constructor has finished, you've set the
    // editor's size to whatever you need it to be.
    setSize (880, 440);
}

Grnlr_kleinAudioProcessorEditor::~Grnlr_kleinAudioProcessorEditor()
{
    stopThread(4000);
}

//==============================================================================
void Grnlr_kleinAudioProcessorEditor::paint (Graphics& g)
{
    g.fillAll (Colours::white);
}

void Grnlr_kleinAudioProcessorEditor::resized()
{
    int width = getWidth() - 20;
    Rectangle<int> r (getLocalBounds().reduced(4));    
    
    // Waveform
    waveform->setBounds(r.removeFromTop (140));
    openButton.setBounds(10, 150, 120, 20);
    
    positionSlider.setBounds(10, 190, width, 30);
    // Fill Factor
    fillLabel.setBounds(10, 225, width, 20);
    fillSlider.setBounds(10, 250, width, 30);
    // Duration
    durationLabel.setBounds(10, 305, width, 20);
    durationSlider.setBounds(10, 320, width, 30);
    
}

void Grnlr_kleinAudioProcessorEditor::buttonClicked (Button* button)
{
    if(button == &openButton) openButtonClicked();
}

void Grnlr_kleinAudioProcessorEditor::sliderValueChanged(Slider* slider)
{
    if(slider == &fillSlider)
        processor.lengthRatio = (float) fillSlider.getValue();
    if(slider == &positionSlider)
        processor.positionOffset = (float) positionSlider.getValue();
    if(slider == &durationSlider)
        processor.durationSeconds = (float) durationSlider.getValue();
}

void Grnlr_kleinAudioProcessorEditor::run()
{
    while (! threadShouldExit())
    {
        checkForPathToOpen();
        checkForBuffersToFree();
        wait (500);
    }
}

void Grnlr_kleinAudioProcessorEditor::checkForBuffersToFree()
{
    for (int i = buffers.size(); --i >= 0;)
    {
        ReferenceCountedBuffer::Ptr buffer (buffers.getUnchecked (i));
        
        if (buffer->getReferenceCount() == 2)
            buffers.remove (i);
    }
}

void Grnlr_kleinAudioProcessorEditor::checkForPathToOpen()
{
    String pathToOpen;
    swapVariables (pathToOpen, chosenPath);
    
    if (pathToOpen.isNotEmpty())
    {
        std::cout << "We have a file!" << std::endl;
        const File file (pathToOpen);
        ScopedPointer<AudioFormatReader> reader (formatManager.createReaderFor (file));
        
        if (reader != nullptr)
        {
            const double duration = reader->lengthInSamples / reader->sampleRate;
            
            if (duration < 120)
            {
                ReferenceCountedBuffer::Ptr newBuffer = new ReferenceCountedBuffer (file.getFileName(),
                                                                                    reader->numChannels,
                                                                                    reader->lengthInSamples);
                
                reader->read (newBuffer->getAudioSampleBuffer(), 0, reader->lengthInSamples, 0, true, true);
                processor.currentBuffer = newBuffer;
                buffers.add (newBuffer);
                processor.sampleIsLoaded  = true;
                processor.lengthInSamples = reader->lengthInSamples;
            }
            else
            {
                // handle the error that the file is 120 seconds or longer..
            }
        }
    }
}

void Grnlr_kleinAudioProcessorEditor::openButtonClicked()
{
    FileChooser chooser ( "Select a Wave file shorter than 60 seconds to play...",
                         File::nonexistent,
                         "*.wav" );
    
    if (chooser.browseForFileToOpen())
    {
        const File file (chooser.getResult());
        String path (file.getFullPathName());
        swapVariables (chosenPath, path);
        waveform->setFile(file);
        notify();
    }
}

void Grnlr_kleinAudioProcessorEditor::changeListenerCallback (ChangeBroadcaster* source)
{
    if (source == waveform)
        waveform->setFile (waveform->getLastDroppedFile());
}
