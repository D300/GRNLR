/*
 ==============================================================================

 This file was auto-generated by the Introjucer!

 It contains the basic framework code for a JUCE plugin processor.

 ==============================================================================
 */

#ifndef PLUGINPROCESSOR_H_INCLUDED
#define PLUGINPROCESSOR_H_INCLUDED

#include "../JuceLibraryCode/JuceHeader.h"
#include "Grain.h"
#include "ReferenceCountedBuffer.h"
#include <vector>



//==============================================================================
/**
 */
class GrnlrAudioProcessor  : public AudioProcessor,
                             public Thread
{
public:
    //==============================================================================
    GrnlrAudioProcessor();
    ~GrnlrAudioProcessor();

    //==============================================================================
    void prepareToPlay (double sampleRate, int samplesPerBlock) override;
    void releaseResources() override;

    void processBlock (AudioSampleBuffer&, MidiBuffer&) override;
    void processMidi (MidiBuffer& midiMessages, int numSamples);

    void run () override;
    //==============================================================================
    void schedule(
                  int startPosition,
                  int length,
                  float durSecs,
                  float trans,
                  bool direciton,
                  float center,
                  float sustain,
                  float curve,
                  float volume
                  );
    
    int wchoose(float weight);

    //==============================================================================
    AudioProcessorEditor* createEditor() override;
    bool hasEditor() const override;

    //==============================================================================
    const String getName() const override;

    bool acceptsMidi() const override { return true; };
    bool producesMidi() const override;
    bool silenceInProducesSilenceOut() const override;
    double getTailLengthSeconds() const override;

    //==============================================================================
    int getNumPrograms() override;
    int getCurrentProgram() override;
    void setCurrentProgram (int index) override;
    const String getProgramName (int index) override;
    void changeProgramName (int index, const String& newName) override;

    //==============================================================================
    void getStateInformation (MemoryBlock& destData) override;
    void setStateInformation (const void* data, int sizeInBytes) override;

    //==============================================================================
    AudioSampleBuffer tempBuffer;
    std::vector<Grain> stack;

    int midiNotes[128] = {0};

    ReferenceCountedBuffer::Ptr currentBuffer;

    MidiKeyboardState keyboardState;

    // CONTROLS
    // Main Grain Controls:
    AudioParameterFloat* positionParam;
    AudioParameterFloat* randPosParam;
    AudioParameterFloat* directionParam;
    AudioParameterFloat* densityParam;
    AudioParameterFloat* randDensityParam;
    AudioParameterFloat* durationParam;
    AudioParameterFloat* randDurParam;
    AudioParameterFloat* transParam;
    AudioParameterFloat* randTransParam;
    AudioParameterFloat* volumeParam;
    AudioParameterFloat* randVolumeParam;
    AudioParameterBool* holdParam;

    // Envelope:
    AudioParameterFloat* envCenterParam;
    AudioParameterFloat* envSustainParam;
    AudioParameterFloat* envCurveParam;

    bool sampleIsLoaded = false;
    String filePath;
    String loadedPath;

    int lengthInSamples;
    int positionOffsetInSamples;
    int durationMillis;

    int schedulerLatency;

    long long int time; // maybe I'll have to find a better way to
                        // represent time than by samples... Leaving
                        // this program running for more than 1 Day
                        // treads into 64 bit territory. Although this
                        // still runs on 32bit machines I feel there
                        // has to be a better way...

    int sampleRate;

private:
    //==============================================================================
    JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (GrnlrAudioProcessor)
};

#endif  // PLUGINPROCESSOR_H_INCLUDED
