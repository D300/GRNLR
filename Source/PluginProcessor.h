/*
  ==============================================================================

  This file was auto-generated by the Introjucer!

  It contains the basic framework code for a JUCE plugin processor.

  ==============================================================================
*/

#ifndef PLUGINPROCESSOR_H_INCLUDED
#define PLUGINPROCESSOR_H_INCLUDED

#include "../JuceLibraryCode/JuceHeader.h"
#include "Grain.h"
#include <deque>
#include <chrono>


//==============================================================================
/**
 */
class ReferenceCountedBuffer : public ReferenceCountedObject
{
public:
  typedef ReferenceCountedObjectPtr<ReferenceCountedBuffer> Ptr;
      
  ReferenceCountedBuffer (const String& nameToUse,
			  int numChannels,
			  int numSamples) : position (0),
					    name (nameToUse),
					    buffer (numChannels, numSamples)
  {
    DBG (
	 String ("Buffer named '") + name +
	 "' constructed. numChannels = " + String (numChannels) +
	 ", numSamples = " + String (numSamples) );
  }
  
  ~ReferenceCountedBuffer()
  {
    DBG (String ("Buffer named '") + name + "' destroyed");
  }
  
  AudioSampleBuffer* getAudioSampleBuffer()
  {
    return &buffer;
  }
      
  int position;
      
private:
  String name;
  AudioSampleBuffer buffer;
	
  JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (ReferenceCountedBuffer)
};

class Grnlr_kleinAudioProcessor  : public AudioProcessor,
                                   public Thread
{
public:
  //==============================================================================
  Grnlr_kleinAudioProcessor();
  ~Grnlr_kleinAudioProcessor();

  //==============================================================================
  void prepareToPlay (double sampleRate, int samplesPerBlock) override;
  void releaseResources() override;

  void applyEnvelope (AudioSampleBuffer&);
  void processBlock (AudioSampleBuffer&, MidiBuffer&) override;
  void addBuffers (AudioSampleBuffer&, AudioSampleBuffer&);

  void run () override;
    
  //==============================================================================    
  void updateValues();
  void schedule(int startPosition, int length, int time);
  double checkTime();
    
  //==============================================================================
  AudioProcessorEditor* createEditor() override;
  bool hasEditor() const override;

  //==============================================================================
  const String getName() const override;

  bool acceptsMidi() const override;
  bool producesMidi() const override;
  bool silenceInProducesSilenceOut() const override;
  double getTailLengthSeconds() const override;

  //==============================================================================
  int getNumPrograms() override;
  int getCurrentProgram() override;
  void setCurrentProgram (int index) override;
  const String getProgramName (int index) override;
  void changeProgramName (int index, const String& newName) override;

  //==============================================================================
  void getStateInformation (MemoryBlock& destData) override;
  void setStateInformation (const void* data, int sizeInBytes) override;

  //==============================================================================
  AudioSampleBuffer tempBuffer;
  std::deque<Grain> stack;

  ReferenceCountedBuffer::Ptr currentBuffer;
    
  int position;

  float lengthRatio;
  float positionOffset;
  float durationSeconds;

  bool sampleIsLoaded = false;

  int lengthInSamples;
  int positionOffsetInSamples;
  int durationMillis;

  int sampleRate;
  
private:
  Random random; // is this still needed?
    
  //==============================================================================
  JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (Grnlr_kleinAudioProcessor)
};

#endif  // PLUGINPROCESSOR_H_INCLUDED
